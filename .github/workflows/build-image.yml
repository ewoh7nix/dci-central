name: Build and Push

on:
  push:
    branches: [ "feature-1/*", "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/dcicentral

jobs:
  build:
    name: Install, build and test the codes
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    strategy:
      matrix:
        node-version: [22.x]
    outputs:
      github_tag_name: ${{ steps.git_tag.outputs.GITHUB_TAG_NAME }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build Node.js codes
        run: npm run build --if-present
      - name: Run unit test
        run: npm test
      - name: Set github tag/release name
        id: git_tag
        run: |
          RELEASE_DATE=$(date +%Y%m%d-%M%H%S)
          GIT_SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          echo "GITHUB_TAG_NAME=DCI-$RELEASE_DATE-$GIT_SHORT_SHA" >> $GITHUB_ENV
          echo "GITHUB_TAG_NAME=DCI-$RELEASE_DATE-$GIT_SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Create Tag Release # tag format: GREEN-${date}-${git.sha}
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GITHUB_TAG_NAME }}
          release_name: ${{ env.GITHUB_TAG_NAME }}
          draft: false
          prerelease: false

  build-image:
    needs: build
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      github_tag_name: ${{ needs.build.outputs.github_tag_name }}
    env:
      GITHUB_TAG_NAME: ${{ needs.build.outputs.github_tag_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Build and push the Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ env.IMAGE_NAME }}:${{ env.GITHUB_TAG_NAME }}
      - name: Scan docker image for vulnerabilities
        id: scan
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.IMAGE_NAME }}:${{ env.GITHUB_TAG_NAME }}
          annotations: true
          dockerfile: ./Dockerfile
      - name: Test docker image
        run: |
          CONTAINER_ID=$(docker run -d -p 8080:80 "${{ env.IMAGE_NAME }}:${{ env.GITHUB_TAG_NAME }}")
          STATUS_CODE=$(curl -w '%{response_code}' -o /dev/null -s http://localhost:8080)
          if [[ $STATUS_CODE -eq 200 ]]; then
            echo "Docker test passed!"
          else
            echo "Docker test failed, got $STATUS_CODE, expect 200"

          # Stopping container
          docker rm $CONTAINER_ID

  call-staging-deployment:
    needs: build-image
    uses: ewoh7nix/dci-central/.github/workflows/deploy-staging.yml@master
    secrets: inherit
    with:
      tags: ${{ needs.build-image.outputs.github_tag_name }}
